
Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000bc  00800200  00000b3e  00000bd2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b3e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  008002bc  008002bc  00000c8e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c8e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000cc0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001b0  00000000  00000000  00000d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000243f  00000000  00000000  00000eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013a7  00000000  00000000  000032ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000121b  00000000  00000000  00004696  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003e4  00000000  00000000  000058b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000096c  00000000  00000000  00005c98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fbb  00000000  00000000  00006604  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  000075bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	7a c0       	rjmp	.+244    	; 0xf6 <__ctors_end>
   2:	00 00       	nop
   4:	97 c0       	rjmp	.+302    	; 0x134 <__bad_interrupt>
   6:	00 00       	nop
   8:	95 c0       	rjmp	.+298    	; 0x134 <__bad_interrupt>
   a:	00 00       	nop
   c:	93 c0       	rjmp	.+294    	; 0x134 <__bad_interrupt>
   e:	00 00       	nop
  10:	91 c0       	rjmp	.+290    	; 0x134 <__bad_interrupt>
  12:	00 00       	nop
  14:	8f c0       	rjmp	.+286    	; 0x134 <__bad_interrupt>
  16:	00 00       	nop
  18:	8d c0       	rjmp	.+282    	; 0x134 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	8b c0       	rjmp	.+278    	; 0x134 <__bad_interrupt>
  1e:	00 00       	nop
  20:	89 c0       	rjmp	.+274    	; 0x134 <__bad_interrupt>
  22:	00 00       	nop
  24:	87 c0       	rjmp	.+270    	; 0x134 <__bad_interrupt>
  26:	00 00       	nop
  28:	85 c0       	rjmp	.+266    	; 0x134 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	83 c0       	rjmp	.+262    	; 0x134 <__bad_interrupt>
  2e:	00 00       	nop
  30:	81 c0       	rjmp	.+258    	; 0x134 <__bad_interrupt>
  32:	00 00       	nop
  34:	94 c4       	rjmp	.+2344   	; 0x95e <__vector_13>
  36:	00 00       	nop
  38:	7d c0       	rjmp	.+250    	; 0x134 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	7b c0       	rjmp	.+246    	; 0x134 <__bad_interrupt>
  3e:	00 00       	nop
  40:	79 c0       	rjmp	.+242    	; 0x134 <__bad_interrupt>
  42:	00 00       	nop
  44:	78 c0       	rjmp	.+240    	; 0x136 <__vector_17>
  46:	00 00       	nop
  48:	75 c0       	rjmp	.+234    	; 0x134 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	73 c0       	rjmp	.+230    	; 0x134 <__bad_interrupt>
  4e:	00 00       	nop
  50:	71 c0       	rjmp	.+226    	; 0x134 <__bad_interrupt>
  52:	00 00       	nop
  54:	6f c0       	rjmp	.+222    	; 0x134 <__bad_interrupt>
  56:	00 00       	nop
  58:	6d c0       	rjmp	.+218    	; 0x134 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	6b c0       	rjmp	.+214    	; 0x134 <__bad_interrupt>
  5e:	00 00       	nop
  60:	69 c0       	rjmp	.+210    	; 0x134 <__bad_interrupt>
  62:	00 00       	nop
  64:	67 c0       	rjmp	.+206    	; 0x134 <__bad_interrupt>
  66:	00 00       	nop
  68:	65 c0       	rjmp	.+202    	; 0x134 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	63 c0       	rjmp	.+198    	; 0x134 <__bad_interrupt>
  6e:	00 00       	nop
  70:	61 c0       	rjmp	.+194    	; 0x134 <__bad_interrupt>
  72:	00 00       	nop
  74:	5f c0       	rjmp	.+190    	; 0x134 <__bad_interrupt>
  76:	00 00       	nop
  78:	5d c0       	rjmp	.+186    	; 0x134 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	5b c0       	rjmp	.+182    	; 0x134 <__bad_interrupt>
  7e:	00 00       	nop
  80:	59 c0       	rjmp	.+178    	; 0x134 <__bad_interrupt>
  82:	00 00       	nop
  84:	57 c0       	rjmp	.+174    	; 0x134 <__bad_interrupt>
  86:	00 00       	nop
  88:	55 c0       	rjmp	.+170    	; 0x134 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	53 c0       	rjmp	.+166    	; 0x134 <__bad_interrupt>
  8e:	00 00       	nop
  90:	51 c0       	rjmp	.+162    	; 0x134 <__bad_interrupt>
  92:	00 00       	nop
  94:	4f c0       	rjmp	.+158    	; 0x134 <__bad_interrupt>
  96:	00 00       	nop
  98:	4d c0       	rjmp	.+154    	; 0x134 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	4b c0       	rjmp	.+150    	; 0x134 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	49 c0       	rjmp	.+146    	; 0x134 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	47 c0       	rjmp	.+142    	; 0x134 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	45 c0       	rjmp	.+138    	; 0x134 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	43 c0       	rjmp	.+134    	; 0x134 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	41 c0       	rjmp	.+130    	; 0x134 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	3f c0       	rjmp	.+126    	; 0x134 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	3d c0       	rjmp	.+122    	; 0x134 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	3b c0       	rjmp	.+118    	; 0x134 <__bad_interrupt>
  be:	00 00       	nop
  c0:	39 c0       	rjmp	.+114    	; 0x134 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	37 c0       	rjmp	.+110    	; 0x134 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	35 c0       	rjmp	.+106    	; 0x134 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	33 c0       	rjmp	.+102    	; 0x134 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	31 c0       	rjmp	.+98     	; 0x134 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	2f c0       	rjmp	.+94     	; 0x134 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	2d c0       	rjmp	.+90     	; 0x134 <__bad_interrupt>
  da:	00 00       	nop
  dc:	2b c0       	rjmp	.+86     	; 0x134 <__bad_interrupt>
  de:	00 00       	nop
  e0:	29 c0       	rjmp	.+82     	; 0x134 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	1d 04       	cpc	r1, r13
  e6:	31 04       	cpc	r3, r1
  e8:	3a 04       	cpc	r3, r10
  ea:	2c 04       	cpc	r2, r12
  ec:	6a 04       	cpc	r6, r10
  ee:	4f 04       	cpc	r4, r15
  f0:	6c 04       	cpc	r6, r12
  f2:	94 04       	cpc	r9, r4
  f4:	7d 04       	cpc	r7, r13

000000f6 <__ctors_end>:
  f6:	11 24       	eor	r1, r1
  f8:	1f be       	out	0x3f, r1	; 63
  fa:	cf ef       	ldi	r28, 0xFF	; 255
  fc:	d1 e2       	ldi	r29, 0x21	; 33
  fe:	de bf       	out	0x3e, r29	; 62
 100:	cd bf       	out	0x3d, r28	; 61
 102:	00 e0       	ldi	r16, 0x00	; 0
 104:	0c bf       	out	0x3c, r16	; 60

00000106 <__do_copy_data>:
 106:	12 e0       	ldi	r17, 0x02	; 2
 108:	a0 e0       	ldi	r26, 0x00	; 0
 10a:	b2 e0       	ldi	r27, 0x02	; 2
 10c:	ee e3       	ldi	r30, 0x3E	; 62
 10e:	fb e0       	ldi	r31, 0x0B	; 11
 110:	00 e0       	ldi	r16, 0x00	; 0
 112:	0b bf       	out	0x3b, r16	; 59
 114:	02 c0       	rjmp	.+4      	; 0x11a <__do_copy_data+0x14>
 116:	07 90       	elpm	r0, Z+
 118:	0d 92       	st	X+, r0
 11a:	ac 3b       	cpi	r26, 0xBC	; 188
 11c:	b1 07       	cpc	r27, r17
 11e:	d9 f7       	brne	.-10     	; 0x116 <__do_copy_data+0x10>

00000120 <__do_clear_bss>:
 120:	22 e0       	ldi	r18, 0x02	; 2
 122:	ac eb       	ldi	r26, 0xBC	; 188
 124:	b2 e0       	ldi	r27, 0x02	; 2
 126:	01 c0       	rjmp	.+2      	; 0x12a <.do_clear_bss_start>

00000128 <.do_clear_bss_loop>:
 128:	1d 92       	st	X+, r1

0000012a <.do_clear_bss_start>:
 12a:	a7 3c       	cpi	r26, 0xC7	; 199
 12c:	b2 07       	cpc	r27, r18
 12e:	e1 f7       	brne	.-8      	; 0x128 <.do_clear_bss_loop>
 130:	5d d3       	rcall	.+1722   	; 0x7ec <main>
 132:	03 c5       	rjmp	.+2566   	; 0xb3a <_exit>

00000134 <__bad_interrupt>:
 134:	65 cf       	rjmp	.-310    	; 0x0 <__vectors>

00000136 <__vector_17>:
#include "buzzer.h"
#include "main.h"
#include <avr/io.h>
#include <avr/interrupt.h>

ISR(TIMER1_COMPA_vect){
 136:	1f 92       	push	r1
 138:	0f 92       	push	r0
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	0f 92       	push	r0
 13e:	11 24       	eor	r1, r1
 140:	8f 93       	push	r24
 142:	9f 93       	push	r25
    //switch port on/off to make sound.
    PORTE ^= (1 << PE3);
 144:	9e b1       	in	r25, 0x0e	; 14
 146:	88 e0       	ldi	r24, 0x08	; 8
 148:	89 27       	eor	r24, r25
 14a:	8e b9       	out	0x0e, r24	; 14
    //for some reason has to enable interrupts after every interrupt. Otherwise deadlocks.
    sei();
 14c:	78 94       	sei
}
 14e:	9f 91       	pop	r25
 150:	8f 91       	pop	r24
 152:	0f 90       	pop	r0
 154:	0f be       	out	0x3f, r0	; 63
 156:	0f 90       	pop	r0
 158:	1f 90       	pop	r1
 15a:	18 95       	reti

0000015c <buzzer_init>:

void buzzer_init() {

    //clean clock
    TCCR1A = 0;
 15c:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    TCCR1B = 0;
 160:	e1 e8       	ldi	r30, 0x81	; 129
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	10 82       	st	Z, r1

    TCCR1B |= 1 << WGM12 | 1 << CS10;
 166:	80 81       	ld	r24, Z
 168:	89 60       	ori	r24, 0x09	; 9
 16a:	80 83       	st	Z, r24
    TCCR1B = (TCCR1B & 0b11111000) | 0b001;
 16c:	80 81       	ld	r24, Z
 16e:	88 7f       	andi	r24, 0xF8	; 248
 170:	81 60       	ori	r24, 0x01	; 1
 172:	80 83       	st	Z, r24

    // set frequency
    OCR1A = F_CPU / 32 / 2 / 64 - 1;
 174:	81 e4       	ldi	r24, 0x41	; 65
 176:	9f e0       	ldi	r25, 0x0F	; 15
 178:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
 17c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
 180:	08 95       	ret

00000182 <Start_Buzzing>:
}

void Start_Buzzing() {
    //enable COMPA interrupt to start buzzing.
    TIMSK1 |= 1 << OCIE1A;
 182:	ef e6       	ldi	r30, 0x6F	; 111
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	80 81       	ld	r24, Z
 188:	82 60       	ori	r24, 0x02	; 2
 18a:	80 83       	st	Z, r24
 18c:	08 95       	ret

0000018e <Stop_Buzzing>:
}

void Stop_Buzzing() {
    //disable COMPA interrupt to start buzzing.
    TIMSK1 &= ~(1 << OCIE1A);
 18e:	ef e6       	ldi	r30, 0x6F	; 111
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	8d 7f       	andi	r24, 0xFD	; 253
 196:	80 83       	st	Z, r24
    //set buzzer pin off.
    PORTE &= ~(1 << PE3);
 198:	8e b1       	in	r24, 0x0e	; 14
 19a:	87 7f       	andi	r24, 0xF7	; 247
 19c:	8e b9       	out	0x0e, r24	; 14
 19e:	08 95       	ret

000001a0 <I2C_init>:

#include "i2c.h"

void I2C_init()
{
    TWSR = 0x00;
 1a0:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    TWBR = 0x03;
 1a4:	83 e0       	ldi	r24, 0x03	; 3
 1a6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
 1aa:	08 95       	ret

000001ac <I2C_write_start>:
}

uint8_t I2C_write_start(char slave_write_addr)
{
    uint8_t twi_status;
    TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT);
 1ac:	94 ea       	ldi	r25, 0xA4	; 164
 1ae:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    while (!(TWCR & (1 << TWINT)));
 1b2:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 1b6:	99 23       	and	r25, r25
 1b8:	e4 f7       	brge	.-8      	; 0x1b2 <I2C_write_start+0x6>
    twi_status = TWSR & 0xF8;
 1ba:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
 1be:	98 7f       	andi	r25, 0xF8	; 248
    if (twi_status != 0x08)
 1c0:	98 30       	cpi	r25, 0x08	; 8
 1c2:	91 f4       	brne	.+36     	; 0x1e8 <I2C_write_start+0x3c>
        return TWI_START_FAILED;
    TWDR = slave_write_addr;
 1c4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    TWCR = (1 << TWEN) | (1 << TWINT);
 1c8:	84 e8       	ldi	r24, 0x84	; 132
 1ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    while (!(TWCR & (1 << TWINT)));
 1ce:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 1d2:	88 23       	and	r24, r24
 1d4:	e4 f7       	brge	.-8      	; 0x1ce <I2C_write_start+0x22>
    twi_status = TWSR & 0xF8;
 1d6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
 1da:	88 7f       	andi	r24, 0xF8	; 248
    if (twi_status == 0x18)
 1dc:	88 31       	cpi	r24, 0x18	; 24
 1de:	31 f0       	breq	.+12     	; 0x1ec <I2C_write_start+0x40>
        return TWI_ACK_RECEIVED;
    if (twi_status == 0x20)
 1e0:	80 32       	cpi	r24, 0x20	; 32
 1e2:	31 f4       	brne	.+12     	; 0x1f0 <I2C_write_start+0x44>
        return TWI_NACK_RECEIVED;
 1e4:	82 e0       	ldi	r24, 0x02	; 2
 1e6:	08 95       	ret
    uint8_t twi_status;
    TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT);
    while (!(TWCR & (1 << TWINT)));
    twi_status = TWSR & 0xF8;
    if (twi_status != 0x08)
        return TWI_START_FAILED;
 1e8:	84 e0       	ldi	r24, 0x04	; 4
 1ea:	08 95       	ret
    TWDR = slave_write_addr;
    TWCR = (1 << TWEN) | (1 << TWINT);
    while (!(TWCR & (1 << TWINT)));
    twi_status = TWSR & 0xF8;
    if (twi_status == 0x18)
        return TWI_ACK_RECEIVED;
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	08 95       	ret
    if (twi_status == 0x20)
        return TWI_NACK_RECEIVED;

    return TWI_ERROR;
 1f0:	83 e0       	ldi	r24, 0x03	; 3
}
 1f2:	08 95       	ret

000001f4 <I2C_read_start>:

uint8_t I2C_read_start(char slave_read_addr)
{
    uint8_t twi_status;
    TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT);
 1f4:	94 ea       	ldi	r25, 0xA4	; 164
 1f6:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    while (!(TWCR & (1 << TWINT)));
 1fa:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 1fe:	99 23       	and	r25, r25
 200:	e4 f7       	brge	.-8      	; 0x1fa <I2C_read_start+0x6>
    twi_status = TWSR & 0xF8;
 202:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
 206:	98 7f       	andi	r25, 0xF8	; 248
    if (twi_status != 0x08)
 208:	98 30       	cpi	r25, 0x08	; 8
 20a:	91 f4       	brne	.+36     	; 0x230 <I2C_read_start+0x3c>
        return TWI_START_FAILED;
    TWDR = slave_read_addr;
 20c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    TWCR = (1 << TWEN) | (1 << TWINT);
 210:	84 e8       	ldi	r24, 0x84	; 132
 212:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    while (!(TWCR & (1 << TWINT)));
 216:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 21a:	88 23       	and	r24, r24
 21c:	e4 f7       	brge	.-8      	; 0x216 <I2C_read_start+0x22>
    twi_status = TWSR & 0xF8;
 21e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
 222:	88 7f       	andi	r24, 0xF8	; 248
    if (twi_status == 0x40)
 224:	80 34       	cpi	r24, 0x40	; 64
 226:	31 f0       	breq	.+12     	; 0x234 <I2C_read_start+0x40>
        return TWI_ACK_RECEIVED;
    if (twi_status == 0x48)
 228:	88 34       	cpi	r24, 0x48	; 72
 22a:	31 f4       	brne	.+12     	; 0x238 <I2C_read_start+0x44>
        return TWI_NACK_RECEIVED;
 22c:	82 e0       	ldi	r24, 0x02	; 2
 22e:	08 95       	ret
    uint8_t twi_status;
    TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT);
    while (!(TWCR & (1 << TWINT)));
    twi_status = TWSR & 0xF8;
    if (twi_status != 0x08)
        return TWI_START_FAILED;
 230:	84 e0       	ldi	r24, 0x04	; 4
 232:	08 95       	ret
    TWDR = slave_read_addr;
    TWCR = (1 << TWEN) | (1 << TWINT);
    while (!(TWCR & (1 << TWINT)));
    twi_status = TWSR & 0xF8;
    if (twi_status == 0x40)
        return TWI_ACK_RECEIVED;
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	08 95       	ret
    if (twi_status == 0x48)
        return TWI_NACK_RECEIVED;

    return TWI_ERROR;
 238:	83 e0       	ldi	r24, 0x03	; 3
}
 23a:	08 95       	ret

0000023c <I2C_write>:

uint8_t I2C_write(char data) {
    uint8_t tw_status;
    TWDR = data;
 23c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    TWCR = (1 << TWEN) | (1 << TWINT);
 240:	84 e8       	ldi	r24, 0x84	; 132
 242:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    while (!(TWCR & (1 << TWINT)));
 246:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 24a:	88 23       	and	r24, r24
 24c:	e4 f7       	brge	.-8      	; 0x246 <I2C_write+0xa>
    tw_status = TWSR & 0xF8;
 24e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
 252:	88 7f       	andi	r24, 0xF8	; 248
    if (tw_status == 0x28)
 254:	88 32       	cpi	r24, 0x28	; 40
 256:	21 f0       	breq	.+8      	; 0x260 <I2C_write+0x24>
        return TWI_ACK_RECEIVED;
    if (tw_status == 0x30)
 258:	80 33       	cpi	r24, 0x30	; 48
 25a:	21 f4       	brne	.+8      	; 0x264 <I2C_write+0x28>
        return TWI_NACK_RECEIVED;
 25c:	82 e0       	ldi	r24, 0x02	; 2
 25e:	08 95       	ret
    TWDR = data;
    TWCR = (1 << TWEN) | (1 << TWINT);
    while (!(TWCR & (1 << TWINT)));
    tw_status = TWSR & 0xF8;
    if (tw_status == 0x28)
        return TWI_ACK_RECEIVED;
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	08 95       	ret
    if (tw_status == 0x30)
        return TWI_NACK_RECEIVED;

    return TWI_ERROR;
 264:	83 e0       	ldi	r24, 0x03	; 3
}
 266:	08 95       	ret

00000268 <I2C_read_ack>:

char I2C_read_ack() {
    TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWEA);
 268:	84 ec       	ldi	r24, 0xC4	; 196
 26a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    while (!(TWCR & (1 << TWINT)));
 26e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 272:	88 23       	and	r24, r24
 274:	e4 f7       	brge	.-8      	; 0x26e <I2C_read_ack+0x6>
    return TWDR;
 276:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
}
 27a:	08 95       	ret

0000027c <I2C_read_nack>:

char I2C_read_nack() {
    TWCR = (1 << TWEN) | (1 << TWINT);
 27c:	84 e8       	ldi	r24, 0x84	; 132
 27e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    while (!(TWCR & (1 << TWINT)));
 282:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 286:	88 23       	and	r24, r24
 288:	e4 f7       	brge	.-8      	; 0x282 <I2C_read_nack+0x6>
    return TWDR;
 28a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
}
 28e:	08 95       	ret

00000290 <I2C_stop>:

void I2C_stop() {
    TWCR = (1 << TWSTO) | (1 << TWINT) | (1 << TWEN);
 290:	84 e9       	ldi	r24, 0x94	; 148
 292:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    while (TWCR & (1 << TWSTO));
 296:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
 29a:	84 fd       	sbrc	r24, 4
 29c:	fc cf       	rjmp	.-8      	; 0x296 <I2C_stop+0x6>
}
 29e:	08 95       	ret

000002a0 <I2C_command_write>:

int8_t I2C_command_write(char command) {
 2a0:	cf 93       	push	r28
 2a2:	c8 2f       	mov	r28, r24
    uint8_t twi_status = I2C_write_start(SLAVE_WRITE_ADDR);
 2a4:	80 e2       	ldi	r24, 0x20	; 32
 2a6:	82 df       	rcall	.-252    	; 0x1ac <I2C_write_start>
    if (twi_status == TWI_ERROR || twi_status == TWI_START_FAILED) {
 2a8:	83 50       	subi	r24, 0x03	; 3
 2aa:	82 30       	cpi	r24, 0x02	; 2
 2ac:	38 f0       	brcs	.+14     	; 0x2bc <I2C_command_write+0x1c>
        return TWI_ERROR;
    }
    twi_status = I2C_write(command);
 2ae:	8c 2f       	mov	r24, r28
 2b0:	c5 df       	rcall	.-118    	; 0x23c <I2C_write>
    if (twi_status != TWI_ACK_RECEIVED) {
 2b2:	81 30       	cpi	r24, 0x01	; 1
        return TWI_ERROR;
    }
    I2C_stop();
 2b4:	29 f4       	brne	.+10     	; 0x2c0 <I2C_command_write+0x20>
 2b6:	ec df       	rcall	.-40     	; 0x290 <I2C_stop>
    return TWI_OK;
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	03 c0       	rjmp	.+6      	; 0x2c2 <I2C_command_write+0x22>
}

int8_t I2C_command_write(char command) {
    uint8_t twi_status = I2C_write_start(SLAVE_WRITE_ADDR);
    if (twi_status == TWI_ERROR || twi_status == TWI_START_FAILED) {
        return TWI_ERROR;
 2bc:	83 e0       	ldi	r24, 0x03	; 3
 2be:	01 c0       	rjmp	.+2      	; 0x2c2 <I2C_command_write+0x22>
    }
    twi_status = I2C_write(command);
    if (twi_status != TWI_ACK_RECEIVED) {
        return TWI_ERROR;
 2c0:	83 e0       	ldi	r24, 0x03	; 3
    }
    I2C_stop();
    return TWI_OK;
}
 2c2:	cf 91       	pop	r28
 2c4:	08 95       	ret

000002c6 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
 2c6:	85 b1       	in	r24, 0x05	; 5
 2c8:	80 62       	ori	r24, 0x20	; 32
 2ca:	85 b9       	out	0x05, r24	; 5
 2cc:	00 00       	nop
 2ce:	85 b1       	in	r24, 0x05	; 5
 2d0:	8f 7d       	andi	r24, 0xDF	; 223
 2d2:	85 b9       	out	0x05, r24	; 5
 2d4:	08 95       	ret

000002d6 <lcd_write>:
 2d6:	cf 93       	push	r28
 2d8:	c8 2f       	mov	r28, r24
 2da:	66 23       	and	r22, r22
 2dc:	31 f0       	breq	.+12     	; 0x2ea <lcd_write+0x14>
 2de:	e2 e0       	ldi	r30, 0x02	; 2
 2e0:	f1 e0       	ldi	r31, 0x01	; 1
 2e2:	80 81       	ld	r24, Z
 2e4:	80 64       	ori	r24, 0x40	; 64
 2e6:	80 83       	st	Z, r24
 2e8:	05 c0       	rjmp	.+10     	; 0x2f4 <lcd_write+0x1e>
 2ea:	e2 e0       	ldi	r30, 0x02	; 2
 2ec:	f1 e0       	ldi	r31, 0x01	; 1
 2ee:	80 81       	ld	r24, Z
 2f0:	8f 7b       	andi	r24, 0xBF	; 191
 2f2:	80 83       	st	Z, r24
 2f4:	85 b1       	in	r24, 0x05	; 5
 2f6:	8f 7e       	andi	r24, 0xEF	; 239
 2f8:	85 b9       	out	0x05, r24	; 5
 2fa:	8d b1       	in	r24, 0x0d	; 13
 2fc:	80 62       	ori	r24, 0x20	; 32
 2fe:	8d b9       	out	0x0d, r24	; 13
 300:	83 b3       	in	r24, 0x13	; 19
 302:	80 62       	ori	r24, 0x20	; 32
 304:	83 bb       	out	0x13, r24	; 19
 306:	e1 e0       	ldi	r30, 0x01	; 1
 308:	f1 e0       	ldi	r31, 0x01	; 1
 30a:	80 81       	ld	r24, Z
 30c:	88 60       	ori	r24, 0x08	; 8
 30e:	80 83       	st	Z, r24
 310:	80 81       	ld	r24, Z
 312:	80 61       	ori	r24, 0x10	; 16
 314:	80 83       	st	Z, r24
 316:	e2 e0       	ldi	r30, 0x02	; 2
 318:	f1 e0       	ldi	r31, 0x01	; 1
 31a:	80 81       	ld	r24, Z
 31c:	8f 7e       	andi	r24, 0xEF	; 239
 31e:	80 83       	st	Z, r24
 320:	80 81       	ld	r24, Z
 322:	87 7f       	andi	r24, 0xF7	; 247
 324:	80 83       	st	Z, r24
 326:	84 b3       	in	r24, 0x14	; 20
 328:	8f 7d       	andi	r24, 0xDF	; 223
 32a:	84 bb       	out	0x14, r24	; 20
 32c:	8e b1       	in	r24, 0x0e	; 14
 32e:	8f 7d       	andi	r24, 0xDF	; 223
 330:	8e b9       	out	0x0e, r24	; 14
 332:	cc 23       	and	r28, r28
 334:	1c f4       	brge	.+6      	; 0x33c <lcd_write+0x66>
 336:	80 81       	ld	r24, Z
 338:	80 61       	ori	r24, 0x10	; 16
 33a:	80 83       	st	Z, r24
 33c:	c6 ff       	sbrs	r28, 6
 33e:	05 c0       	rjmp	.+10     	; 0x34a <lcd_write+0x74>
 340:	e2 e0       	ldi	r30, 0x02	; 2
 342:	f1 e0       	ldi	r31, 0x01	; 1
 344:	80 81       	ld	r24, Z
 346:	88 60       	ori	r24, 0x08	; 8
 348:	80 83       	st	Z, r24
 34a:	c5 ff       	sbrs	r28, 5
 34c:	03 c0       	rjmp	.+6      	; 0x354 <lcd_write+0x7e>
 34e:	84 b3       	in	r24, 0x14	; 20
 350:	80 62       	ori	r24, 0x20	; 32
 352:	84 bb       	out	0x14, r24	; 20
 354:	c4 ff       	sbrs	r28, 4
 356:	03 c0       	rjmp	.+6      	; 0x35e <lcd_write+0x88>
 358:	8e b1       	in	r24, 0x0e	; 14
 35a:	80 62       	ori	r24, 0x20	; 32
 35c:	8e b9       	out	0x0e, r24	; 14
 35e:	b3 df       	rcall	.-154    	; 0x2c6 <toggle_e>
 360:	e2 e0       	ldi	r30, 0x02	; 2
 362:	f1 e0       	ldi	r31, 0x01	; 1
 364:	80 81       	ld	r24, Z
 366:	8f 7e       	andi	r24, 0xEF	; 239
 368:	80 83       	st	Z, r24
 36a:	80 81       	ld	r24, Z
 36c:	87 7f       	andi	r24, 0xF7	; 247
 36e:	80 83       	st	Z, r24
 370:	84 b3       	in	r24, 0x14	; 20
 372:	8f 7d       	andi	r24, 0xDF	; 223
 374:	84 bb       	out	0x14, r24	; 20
 376:	8e b1       	in	r24, 0x0e	; 14
 378:	8f 7d       	andi	r24, 0xDF	; 223
 37a:	8e b9       	out	0x0e, r24	; 14
 37c:	c3 ff       	sbrs	r28, 3
 37e:	03 c0       	rjmp	.+6      	; 0x386 <lcd_write+0xb0>
 380:	80 81       	ld	r24, Z
 382:	80 61       	ori	r24, 0x10	; 16
 384:	80 83       	st	Z, r24
 386:	c2 ff       	sbrs	r28, 2
 388:	05 c0       	rjmp	.+10     	; 0x394 <lcd_write+0xbe>
 38a:	e2 e0       	ldi	r30, 0x02	; 2
 38c:	f1 e0       	ldi	r31, 0x01	; 1
 38e:	80 81       	ld	r24, Z
 390:	88 60       	ori	r24, 0x08	; 8
 392:	80 83       	st	Z, r24
 394:	c1 ff       	sbrs	r28, 1
 396:	03 c0       	rjmp	.+6      	; 0x39e <lcd_write+0xc8>
 398:	84 b3       	in	r24, 0x14	; 20
 39a:	80 62       	ori	r24, 0x20	; 32
 39c:	84 bb       	out	0x14, r24	; 20
 39e:	c0 ff       	sbrs	r28, 0
 3a0:	03 c0       	rjmp	.+6      	; 0x3a8 <lcd_write+0xd2>
 3a2:	8e b1       	in	r24, 0x0e	; 14
 3a4:	80 62       	ori	r24, 0x20	; 32
 3a6:	8e b9       	out	0x0e, r24	; 14
 3a8:	8e df       	rcall	.-228    	; 0x2c6 <toggle_e>
 3aa:	8e b1       	in	r24, 0x0e	; 14
 3ac:	80 62       	ori	r24, 0x20	; 32
 3ae:	8e b9       	out	0x0e, r24	; 14
 3b0:	84 b3       	in	r24, 0x14	; 20
 3b2:	80 62       	ori	r24, 0x20	; 32
 3b4:	84 bb       	out	0x14, r24	; 20
 3b6:	e2 e0       	ldi	r30, 0x02	; 2
 3b8:	f1 e0       	ldi	r31, 0x01	; 1
 3ba:	80 81       	ld	r24, Z
 3bc:	88 60       	ori	r24, 0x08	; 8
 3be:	80 83       	st	Z, r24
 3c0:	80 81       	ld	r24, Z
 3c2:	80 61       	ori	r24, 0x10	; 16
 3c4:	80 83       	st	Z, r24
 3c6:	cf 91       	pop	r28
 3c8:	08 95       	ret

000003ca <lcd_read>:
 3ca:	88 23       	and	r24, r24
 3cc:	31 f0       	breq	.+12     	; 0x3da <lcd_read+0x10>
 3ce:	e2 e0       	ldi	r30, 0x02	; 2
 3d0:	f1 e0       	ldi	r31, 0x01	; 1
 3d2:	80 81       	ld	r24, Z
 3d4:	80 64       	ori	r24, 0x40	; 64
 3d6:	80 83       	st	Z, r24
 3d8:	05 c0       	rjmp	.+10     	; 0x3e4 <lcd_read+0x1a>
 3da:	e2 e0       	ldi	r30, 0x02	; 2
 3dc:	f1 e0       	ldi	r31, 0x01	; 1
 3de:	80 81       	ld	r24, Z
 3e0:	8f 7b       	andi	r24, 0xBF	; 191
 3e2:	80 83       	st	Z, r24
 3e4:	85 b1       	in	r24, 0x05	; 5
 3e6:	80 61       	ori	r24, 0x10	; 16
 3e8:	85 b9       	out	0x05, r24	; 5
 3ea:	8d b1       	in	r24, 0x0d	; 13
 3ec:	8f 7d       	andi	r24, 0xDF	; 223
 3ee:	8d b9       	out	0x0d, r24	; 13
 3f0:	83 b3       	in	r24, 0x13	; 19
 3f2:	8f 7d       	andi	r24, 0xDF	; 223
 3f4:	83 bb       	out	0x13, r24	; 19
 3f6:	e1 e0       	ldi	r30, 0x01	; 1
 3f8:	f1 e0       	ldi	r31, 0x01	; 1
 3fa:	80 81       	ld	r24, Z
 3fc:	87 7f       	andi	r24, 0xF7	; 247
 3fe:	80 83       	st	Z, r24
 400:	80 81       	ld	r24, Z
 402:	8f 7e       	andi	r24, 0xEF	; 239
 404:	80 83       	st	Z, r24
 406:	85 b1       	in	r24, 0x05	; 5
 408:	80 62       	ori	r24, 0x20	; 32
 40a:	85 b9       	out	0x05, r24	; 5
 40c:	00 00       	nop
 40e:	65 99       	sbic	0x0c, 5	; 12
 410:	02 c0       	rjmp	.+4      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 412:	80 e0       	ldi	r24, 0x00	; 0
 414:	01 c0       	rjmp	.+2      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 416:	80 e1       	ldi	r24, 0x10	; 16
 418:	95 99       	sbic	0x12, 5	; 18
 41a:	80 62       	ori	r24, 0x20	; 32
 41c:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x7c0100>
 420:	93 fd       	sbrc	r25, 3
 422:	80 64       	ori	r24, 0x40	; 64
 424:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x7c0100>
 428:	94 fd       	sbrc	r25, 4
 42a:	80 68       	ori	r24, 0x80	; 128
 42c:	95 b1       	in	r25, 0x05	; 5
 42e:	9f 7d       	andi	r25, 0xDF	; 223
 430:	95 b9       	out	0x05, r25	; 5
 432:	00 00       	nop
 434:	95 b1       	in	r25, 0x05	; 5
 436:	90 62       	ori	r25, 0x20	; 32
 438:	95 b9       	out	0x05, r25	; 5
 43a:	00 00       	nop
 43c:	65 99       	sbic	0x0c, 5	; 12
 43e:	81 60       	ori	r24, 0x01	; 1
 440:	95 99       	sbic	0x12, 5	; 18
 442:	82 60       	ori	r24, 0x02	; 2
 444:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x7c0100>
 448:	93 fd       	sbrc	r25, 3
 44a:	84 60       	ori	r24, 0x04	; 4
 44c:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x7c0100>
 450:	94 fd       	sbrc	r25, 4
 452:	88 60       	ori	r24, 0x08	; 8
 454:	95 b1       	in	r25, 0x05	; 5
 456:	9f 7d       	andi	r25, 0xDF	; 223
 458:	95 b9       	out	0x05, r25	; 5
 45a:	08 95       	ret

0000045c <lcd_waitbusy>:
 45c:	80 e0       	ldi	r24, 0x00	; 0
 45e:	b5 df       	rcall	.-150    	; 0x3ca <lcd_read>
 460:	88 23       	and	r24, r24
 462:	e4 f3       	brlt	.-8      	; 0x45c <lcd_waitbusy>
 464:	00 c0       	rjmp	.+0      	; 0x466 <lcd_waitbusy+0xa>
 466:	00 c0       	rjmp	.+0      	; 0x468 <lcd_waitbusy+0xc>
 468:	80 e0       	ldi	r24, 0x00	; 0
 46a:	af cf       	rjmp	.-162    	; 0x3ca <lcd_read>
 46c:	08 95       	ret

0000046e <lcd_command>:
 46e:	cf 93       	push	r28
 470:	c8 2f       	mov	r28, r24
 472:	f4 df       	rcall	.-24     	; 0x45c <lcd_waitbusy>
 474:	60 e0       	ldi	r22, 0x00	; 0
 476:	8c 2f       	mov	r24, r28
 478:	2e df       	rcall	.-420    	; 0x2d6 <lcd_write>
 47a:	cf 91       	pop	r28
 47c:	08 95       	ret

0000047e <lcd_gotoxy>:
 47e:	61 11       	cpse	r22, r1
 480:	03 c0       	rjmp	.+6      	; 0x488 <lcd_gotoxy+0xa>
 482:	80 58       	subi	r24, 0x80	; 128
 484:	f4 cf       	rjmp	.-24     	; 0x46e <lcd_command>
 486:	08 95       	ret
 488:	80 54       	subi	r24, 0x40	; 64
 48a:	f1 cf       	rjmp	.-30     	; 0x46e <lcd_command>
 48c:	08 95       	ret

0000048e <lcd_clrscr>:
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	ee cf       	rjmp	.-36     	; 0x46e <lcd_command>
 492:	08 95       	ret

00000494 <lcd_putc>:
 494:	cf 93       	push	r28
 496:	c8 2f       	mov	r28, r24
 498:	e1 df       	rcall	.-62     	; 0x45c <lcd_waitbusy>
 49a:	ca 30       	cpi	r28, 0x0A	; 10
 49c:	41 f4       	brne	.+16     	; 0x4ae <lcd_putc+0x1a>
 49e:	80 34       	cpi	r24, 0x40	; 64
 4a0:	10 f4       	brcc	.+4      	; 0x4a6 <lcd_putc+0x12>
 4a2:	80 e4       	ldi	r24, 0x40	; 64
 4a4:	01 c0       	rjmp	.+2      	; 0x4a8 <lcd_putc+0x14>
 4a6:	80 e0       	ldi	r24, 0x00	; 0
 4a8:	80 58       	subi	r24, 0x80	; 128
 4aa:	e1 df       	rcall	.-62     	; 0x46e <lcd_command>
 4ac:	03 c0       	rjmp	.+6      	; 0x4b4 <lcd_putc+0x20>
 4ae:	61 e0       	ldi	r22, 0x01	; 1
 4b0:	8c 2f       	mov	r24, r28
 4b2:	11 df       	rcall	.-478    	; 0x2d6 <lcd_write>
 4b4:	cf 91       	pop	r28
 4b6:	08 95       	ret

000004b8 <lcd_puts>:
 4b8:	cf 93       	push	r28
 4ba:	df 93       	push	r29
 4bc:	fc 01       	movw	r30, r24
 4be:	02 c0       	rjmp	.+4      	; 0x4c4 <lcd_puts+0xc>
 4c0:	e9 df       	rcall	.-46     	; 0x494 <lcd_putc>
 4c2:	fe 01       	movw	r30, r28
 4c4:	ef 01       	movw	r28, r30
 4c6:	21 96       	adiw	r28, 0x01	; 1
 4c8:	80 81       	ld	r24, Z
 4ca:	81 11       	cpse	r24, r1
 4cc:	f9 cf       	rjmp	.-14     	; 0x4c0 <lcd_puts+0x8>
 4ce:	df 91       	pop	r29
 4d0:	cf 91       	pop	r28
 4d2:	08 95       	ret

000004d4 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 4d4:	cf 93       	push	r28
 4d6:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 4d8:	e1 e0       	ldi	r30, 0x01	; 1
 4da:	f1 e0       	ldi	r31, 0x01	; 1
 4dc:	80 81       	ld	r24, Z
 4de:	80 64       	ori	r24, 0x40	; 64
 4e0:	80 83       	st	Z, r24
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 4e2:	84 b1       	in	r24, 0x04	; 4
 4e4:	80 61       	ori	r24, 0x10	; 16
 4e6:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 4e8:	84 b1       	in	r24, 0x04	; 4
 4ea:	80 62       	ori	r24, 0x20	; 32
 4ec:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 4ee:	8d b1       	in	r24, 0x0d	; 13
 4f0:	80 62       	ori	r24, 0x20	; 32
 4f2:	8d b9       	out	0x0d, r24	; 13
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 4f4:	83 b3       	in	r24, 0x13	; 19
 4f6:	80 62       	ori	r24, 0x20	; 32
 4f8:	83 bb       	out	0x13, r24	; 19
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 4fa:	80 81       	ld	r24, Z
 4fc:	88 60       	ori	r24, 0x08	; 8
 4fe:	80 83       	st	Z, r24
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 500:	80 81       	ld	r24, Z
 502:	80 61       	ori	r24, 0x10	; 16
 504:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 506:	8f e9       	ldi	r24, 0x9F	; 159
 508:	9f e0       	ldi	r25, 0x0F	; 15
 50a:	01 97       	sbiw	r24, 0x01	; 1
 50c:	f1 f7       	brne	.-4      	; 0x50a <lcd_init+0x36>
 50e:	00 c0       	rjmp	.+0      	; 0x510 <lcd_init+0x3c>
 510:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
 512:	84 b3       	in	r24, 0x14	; 20
 514:	80 62       	ori	r24, 0x20	; 32
 516:	84 bb       	out	0x14, r24	; 20
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
 518:	8e b1       	in	r24, 0x0e	; 14
 51a:	80 62       	ori	r24, 0x20	; 32
 51c:	8e b9       	out	0x0e, r24	; 14
    lcd_e_toggle();
 51e:	d3 de       	rcall	.-602    	; 0x2c6 <toggle_e>
 520:	81 ee       	ldi	r24, 0xE1	; 225
 522:	94 e0       	ldi	r25, 0x04	; 4
 524:	01 97       	sbiw	r24, 0x01	; 1
 526:	f1 f7       	brne	.-4      	; 0x524 <lcd_init+0x50>
 528:	00 c0       	rjmp	.+0      	; 0x52a <lcd_init+0x56>
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 52a:	00 00       	nop
 52c:	cc de       	rcall	.-616    	; 0x2c6 <toggle_e>
 52e:	95 e1       	ldi	r25, 0x15	; 21
 530:	9a 95       	dec	r25
 532:	f1 f7       	brne	.-4      	; 0x530 <lcd_init+0x5c>
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 534:	00 00       	nop
 536:	c7 de       	rcall	.-626    	; 0x2c6 <toggle_e>
 538:	85 e1       	ldi	r24, 0x15	; 21
 53a:	8a 95       	dec	r24
 53c:	f1 f7       	brne	.-4      	; 0x53a <lcd_init+0x66>
 53e:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 540:	8e b1       	in	r24, 0x0e	; 14
 542:	8f 7d       	andi	r24, 0xDF	; 223
    lcd_e_toggle();
 544:	8e b9       	out	0x0e, r24	; 14
 546:	bf de       	rcall	.-642    	; 0x2c6 <toggle_e>
 548:	95 e1       	ldi	r25, 0x15	; 21
 54a:	9a 95       	dec	r25
 54c:	f1 f7       	brne	.-4      	; 0x54a <lcd_init+0x76>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 54e:	00 00       	nop
 550:	88 e2       	ldi	r24, 0x28	; 40
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 552:	8d df       	rcall	.-230    	; 0x46e <lcd_command>
 554:	88 e0       	ldi	r24, 0x08	; 8
    lcd_clrscr();                           /* display clear                */ 
 556:	8b df       	rcall	.-234    	; 0x46e <lcd_command>
 558:	9a df       	rcall	.-204    	; 0x48e <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 55a:	86 e0       	ldi	r24, 0x06	; 6
 55c:	88 df       	rcall	.-240    	; 0x46e <lcd_command>
 55e:	8c 2f       	mov	r24, r28
    lcd_command(dispAttr);                  /* display/cursor control       */
 560:	86 df       	rcall	.-244    	; 0x46e <lcd_command>
 562:	cf 91       	pop	r28
 564:	08 95       	ret

00000566 <lcd_second_handler>:
 @param   alarm_start time from the timeout start.
 @return  none
*/
void lcd_second_handler(
	uint8_t *seconds, uint8_t x, uint8_t y, 
	uint32_t alarm_now, uint32_t alarm_start) {
 566:	8f 92       	push	r8
 568:	9f 92       	push	r9
 56a:	af 92       	push	r10
 56c:	bf 92       	push	r11
 56e:	cf 92       	push	r12
 570:	df 92       	push	r13
 572:	ef 92       	push	r14
 574:	ff 92       	push	r15
 576:	0f 93       	push	r16
 578:	1f 93       	push	r17
 57a:	cf 93       	push	r28
 57c:	df 93       	push	r29
 57e:	00 d0       	rcall	.+0      	; 0x580 <lcd_second_handler+0x1a>
 580:	1f 92       	push	r1
 582:	1f 92       	push	r1
 584:	cd b7       	in	r28, 0x3d	; 61
 586:	de b7       	in	r29, 0x3e	; 62
 588:	5c 01       	movw	r10, r24
 58a:	96 2e       	mov	r9, r22
 58c:	84 2e       	mov	r8, r20
    uint8_t next_second = (ALARM_TIME - (alarm_now - alarm_start)) / 1000;
 58e:	d7 01       	movw	r26, r14
 590:	c6 01       	movw	r24, r12
 592:	80 1b       	sub	r24, r16
 594:	91 0b       	sbc	r25, r17
 596:	a2 0b       	sbc	r26, r18
 598:	b3 0b       	sbc	r27, r19
 59a:	bc 01       	movw	r22, r24
 59c:	cd 01       	movw	r24, r26
 59e:	68 57       	subi	r22, 0x78	; 120
 5a0:	7c 4e       	sbci	r23, 0xEC	; 236
 5a2:	8f 4f       	sbci	r24, 0xFF	; 255
 5a4:	9f 4f       	sbci	r25, 0xFF	; 255
 5a6:	28 ee       	ldi	r18, 0xE8	; 232
 5a8:	33 e0       	ldi	r19, 0x03	; 3
 5aa:	40 e0       	ldi	r20, 0x00	; 0
 5ac:	50 e0       	ldi	r21, 0x00	; 0
 5ae:	2f d2       	rcall	.+1118   	; 0xa0e <__udivmodsi4>
    char seconds_array[5];
    if (next_second != *seconds) {
 5b0:	f5 01       	movw	r30, r10
 5b2:	80 81       	ld	r24, Z
 5b4:	82 17       	cp	r24, r18
 5b6:	99 f0       	breq	.+38     	; 0x5de <lcd_second_handler+0x78>
 5b8:	12 2f       	mov	r17, r18
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 5ba:	49 e0       	ldi	r20, 0x09	; 9
 5bc:	be 01       	movw	r22, r28
 5be:	6f 5f       	subi	r22, 0xFF	; 255
 5c0:	7f 4f       	sbci	r23, 0xFF	; 255
 5c2:	81 2f       	mov	r24, r17
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	56 d2       	rcall	.+1196   	; 0xa74 <__itoa_ncheck>
        itoa(next_second, seconds_array, 9);
        *seconds = next_second;
 5c8:	f5 01       	movw	r30, r10
 5ca:	10 83       	st	Z, r17
        lcd_gotoxy(x, y);
 5cc:	68 2d       	mov	r22, r8
 5ce:	89 2d       	mov	r24, r9
 5d0:	56 df       	rcall	.-340    	; 0x47e <lcd_gotoxy>
        lcd_puts(seconds_array);
 5d2:	ce 01       	movw	r24, r28
 5d4:	01 96       	adiw	r24, 0x01	; 1
 5d6:	70 df       	rcall	.-288    	; 0x4b8 <lcd_puts>
        lcd_puts("   ");
 5d8:	8c e1       	ldi	r24, 0x1C	; 28
 5da:	92 e0       	ldi	r25, 0x02	; 2
 5dc:	6d df       	rcall	.-294    	; 0x4b8 <lcd_puts>
 5de:	0f 90       	pop	r0
    }
}
 5e0:	0f 90       	pop	r0
 5e2:	0f 90       	pop	r0
 5e4:	0f 90       	pop	r0
 5e6:	0f 90       	pop	r0
 5e8:	df 91       	pop	r29
 5ea:	cf 91       	pop	r28
 5ec:	1f 91       	pop	r17
 5ee:	0f 91       	pop	r16
 5f0:	ff 90       	pop	r15
 5f2:	ef 90       	pop	r14
 5f4:	df 90       	pop	r13
 5f6:	cf 90       	pop	r12
 5f8:	bf 90       	pop	r11
 5fa:	af 90       	pop	r10
 5fc:	9f 90       	pop	r9
 5fe:	8f 90       	pop	r8
 600:	08 95       	ret

00000602 <password_handle_key>:
 602:	0f 93       	push	r16
 @return  status \b PWD_KEY_TIMEOUT Slave timed out from reading the key from user. \n
                 \b PWD_KEY_STOP Slave send stop key. \n
                 \b PWD_KEY_CONTINUE Everything ok, may continue reading next key. \n
                 \b PWD_KEY_INDEX_ERR Index out of bounds. \n
*/
int8_t password_handle_key(char *buffer, uint8_t *cursor) {
 604:	1f 93       	push	r17
 606:	cf 93       	push	r28
 608:	df 93       	push	r29
 60a:	9c 01       	movw	r18, r24
    if (*cursor > PWD_MAX_LENGTH) { return PWD_KEY_INDEX_ERR; }
 60c:	fb 01       	movw	r30, r22
 60e:	90 81       	ld	r25, Z
 610:	9a 30       	cpi	r25, 0x0A	; 10
 612:	38 f5       	brcc	.+78     	; 0x662 <password_handle_key+0x60>
 614:	eb 01       	movw	r28, r22
 616:	89 01       	movw	r16, r18
    char key;
    int8_t status;
    switch (key = I2C_read_ack()) {
 618:	27 de       	rcall	.-946    	; 0x268 <I2C_read_ack>
 61a:	83 34       	cpi	r24, 0x43	; 67
 61c:	39 f0       	breq	.+14     	; 0x62c <password_handle_key+0x2a>
 61e:	88 37       	cpi	r24, 0x78	; 120
 620:	19 f0       	breq	.+6      	; 0x628 <password_handle_key+0x26>
 622:	83 32       	cpi	r24, 0x23	; 35
 624:	61 f4       	brne	.+24     	; 0x63e <password_handle_key+0x3c>
 626:	1f c0       	rjmp	.+62     	; 0x666 <password_handle_key+0x64>
        case KEYPAD_KEY_TIMEOUT:
            status = PWD_KEY_TIMEOUT;
 628:	8f ef       	ldi	r24, 0xFF	; 255
 62a:	1e c0       	rjmp	.+60     	; 0x668 <password_handle_key+0x66>
            break;
        case KEYPAD_KEY_BACKSPACE:
            *cursor = *cursor - 1;
 62c:	88 81       	ld	r24, Y
 62e:	81 50       	subi	r24, 0x01	; 1
 630:	88 83       	st	Y, r24
            buffer[*cursor] = '\0';
 632:	f8 01       	movw	r30, r16
 634:	e8 0f       	add	r30, r24
 636:	f1 1d       	adc	r31, r1
 638:	10 82       	st	Z, r1
            status = PWD_KEY_CONTINUE;
 63a:	80 e0       	ldi	r24, 0x00	; 0
            break;
 63c:	15 c0       	rjmp	.+42     	; 0x668 <password_handle_key+0x66>
        case KEYPAD_KEY_ENTER:
            status = PWD_KEY_STOP;
            break;
        default:
            buffer[*cursor] = key;
 63e:	98 81       	ld	r25, Y
 640:	f8 01       	movw	r30, r16
 642:	e9 0f       	add	r30, r25
 644:	f1 1d       	adc	r31, r1
 646:	80 83       	st	Z, r24
            buffer[*cursor + 1] = '\0';
 648:	28 81       	ld	r18, Y
 64a:	30 e0       	ldi	r19, 0x00	; 0
 64c:	2f 5f       	subi	r18, 0xFF	; 255
 64e:	3f 4f       	sbci	r19, 0xFF	; 255
 650:	f8 01       	movw	r30, r16
 652:	e2 0f       	add	r30, r18
 654:	f3 1f       	adc	r31, r19
 656:	10 82       	st	Z, r1
            *cursor = *cursor + 1;
 658:	88 81       	ld	r24, Y
 65a:	8f 5f       	subi	r24, 0xFF	; 255
 65c:	88 83       	st	Y, r24
            status = PWD_KEY_CONTINUE;
 65e:	80 e0       	ldi	r24, 0x00	; 0
            break;
 660:	03 c0       	rjmp	.+6      	; 0x668 <password_handle_key+0x66>
                 \b PWD_KEY_STOP Slave send stop key. \n
                 \b PWD_KEY_CONTINUE Everything ok, may continue reading next key. \n
                 \b PWD_KEY_INDEX_ERR Index out of bounds. \n
*/
int8_t password_handle_key(char *buffer, uint8_t *cursor) {
    if (*cursor > PWD_MAX_LENGTH) { return PWD_KEY_INDEX_ERR; }
 662:	8e ef       	ldi	r24, 0xFE	; 254
 664:	01 c0       	rjmp	.+2      	; 0x668 <password_handle_key+0x66>
            *cursor = *cursor - 1;
            buffer[*cursor] = '\0';
            status = PWD_KEY_CONTINUE;
            break;
        case KEYPAD_KEY_ENTER:
            status = PWD_KEY_STOP;
 666:	81 e0       	ldi	r24, 0x01	; 1
            *cursor = *cursor + 1;
            status = PWD_KEY_CONTINUE;
            break;
    }
    return status;
 668:	df 91       	pop	r29
 66a:	cf 91       	pop	r28
 66c:	1f 91       	pop	r17
 66e:	0f 91       	pop	r16
 670:	08 95       	ret

00000672 <password_handle>:

 Handles password reading loop.
 @param   none
 @return  none
*/
void password_handle() {
 672:	4f 92       	push	r4
 674:	5f 92       	push	r5
 676:	6f 92       	push	r6
 678:	7f 92       	push	r7
 67a:	8f 92       	push	r8
 67c:	9f 92       	push	r9
 67e:	af 92       	push	r10
 680:	bf 92       	push	r11
 682:	cf 92       	push	r12
 684:	df 92       	push	r13
 686:	ef 92       	push	r14
 688:	ff 92       	push	r15
 68a:	0f 93       	push	r16
 68c:	1f 93       	push	r17
 68e:	cf 93       	push	r28
 690:	df 93       	push	r29
 692:	cd b7       	in	r28, 0x3d	; 61
 694:	de b7       	in	r29, 0x3e	; 62
 696:	66 97       	sbiw	r28, 0x16	; 22
 698:	0f b6       	in	r0, 0x3f	; 63
 69a:	f8 94       	cli
 69c:	de bf       	out	0x3e, r29	; 62
 69e:	0f be       	out	0x3f, r0	; 63
 6a0:	cd bf       	out	0x3d, r28	; 61
    uint64_t alarm_now;
    char password_buffer[10] = {'\0'};
 6a2:	fe 01       	movw	r30, r28
 6a4:	31 96       	adiw	r30, 0x01	; 1
 6a6:	8a e0       	ldi	r24, 0x0A	; 10
 6a8:	df 01       	movw	r26, r30
 6aa:	1d 92       	st	X+, r1
 6ac:	8a 95       	dec	r24
 6ae:	e9 f7       	brne	.-6      	; 0x6aa <password_handle+0x38>
    uint8_t seconds;
    char seconds_array[5];
    char password[] = "0000";
 6b0:	85 e0       	ldi	r24, 0x05	; 5
 6b2:	eb e6       	ldi	r30, 0x6B	; 107
 6b4:	f2 e0       	ldi	r31, 0x02	; 2
 6b6:	de 01       	movw	r26, r28
 6b8:	51 96       	adiw	r26, 0x11	; 17
 6ba:	01 90       	ld	r0, Z+
 6bc:	0d 92       	st	X+, r0
 6be:	8a 95       	dec	r24
 6c0:	e1 f7       	brne	.-8      	; 0x6ba <password_handle+0x48>
    uint8_t twi_status;
    int8_t key_read_status;
    uint32_t alarm_start = millis();
 6c2:	72 d1       	rcall	.+740    	; 0x9a8 <millis>
 6c4:	2b 01       	movw	r4, r22
 6c6:	3c 01       	movw	r6, r24
    seconds = ALARM_TIME / 1000;
 6c8:	85 e0       	ldi	r24, 0x05	; 5
    lcd_clrscr();
 6ca:	8b 87       	std	Y+11, r24	; 0x0b
 6cc:	e0 de       	rcall	.-576    	; 0x48e <lcd_clrscr>
    lcd_puts("Alarm in: ");
 6ce:	80 e2       	ldi	r24, 0x20	; 32
 6d0:	92 e0       	ldi	r25, 0x02	; 2
 6d2:	f2 de       	rcall	.-540    	; 0x4b8 <lcd_puts>
    lcd_gotoxy(11, 0);
 6d4:	60 e0       	ldi	r22, 0x00	; 0
 6d6:	8b e0       	ldi	r24, 0x0B	; 11
 6d8:	d2 de       	rcall	.-604    	; 0x47e <lcd_gotoxy>
 6da:	8b 85       	ldd	r24, Y+11	; 0x0b
    itoa(seconds, seconds_array, 9);
 6dc:	49 e0       	ldi	r20, 0x09	; 9
 6de:	be 01       	movw	r22, r28
 6e0:	64 5f       	subi	r22, 0xF4	; 244
 6e2:	7f 4f       	sbci	r23, 0xFF	; 255
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	c6 d1       	rcall	.+908    	; 0xa74 <__itoa_ncheck>
    lcd_puts(seconds_array);
 6e8:	ce 01       	movw	r24, r28
 6ea:	0c 96       	adiw	r24, 0x0c	; 12
 6ec:	e5 de       	rcall	.-566    	; 0x4b8 <lcd_puts>
 6ee:	8b e6       	ldi	r24, 0x6B	; 107

    if (I2C_command_write(KEYPAD_READ_COMMAND) != TWI_OK) {
 6f0:	d7 dd       	rcall	.-1106   	; 0x2a0 <I2C_command_write>
 6f2:	88 23       	and	r24, r24
 6f4:	39 f0       	breq	.+14     	; 0x704 <password_handle+0x92>
 6f6:	8b e2       	ldi	r24, 0x2B	; 43
        printf("Error writing keypad read command.\n");
 6f8:	92 e0       	ldi	r25, 0x02	; 2
 6fa:	df d1       	rcall	.+958    	; 0xaba <puts>
 6fc:	83 e0       	ldi	r24, 0x03	; 3
 6fe:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <__data_end>
        g_STATE = Fail;
 702:	03 c0       	rjmp	.+6      	; 0x70a <password_handle+0x98>
 704:	85 e0       	ldi	r24, 0x05	; 5
    } else { g_STATE = readMotion; }
 706:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <__data_end>

    twi_status = I2C_read_start(SLAVE_READ_ADDR);
 70a:	81 e2       	ldi	r24, 0x21	; 33
 70c:	73 dd       	rcall	.-1306   	; 0x1f4 <I2C_read_start>
 70e:	81 30       	cpi	r24, 0x01	; 1
    if (twi_status != TWI_ACK_RECEIVED) {
 710:	39 f0       	breq	.+14     	; 0x720 <password_handle+0xae>
        printf("Error starting reading keys.\n");
 712:	8e e4       	ldi	r24, 0x4E	; 78
 714:	92 e0       	ldi	r25, 0x02	; 2
 716:	d1 d1       	rcall	.+930    	; 0xaba <puts>
 718:	83 e0       	ldi	r24, 0x03	; 3
        g_STATE = Fail;
 71a:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <__data_end>
 71e:	4f c0       	rjmp	.+158    	; 0x7be <password_handle+0x14c>
        return;
 720:	1e 8a       	std	Y+22, r1	; 0x16
    }

    uint8_t i = 0;
 722:	42 d1       	rcall	.+644    	; 0x9a8 <millis>
    while (1) {
        alarm_now = millis();
 724:	4b 01       	movw	r8, r22
 726:	5c 01       	movw	r10, r24
 728:	73 01       	movw	r14, r6
        lcd_second_handler(&seconds, 11, 0, alarm_now, alarm_start);
 72a:	62 01       	movw	r12, r4
 72c:	8b 01       	movw	r16, r22
 72e:	9c 01       	movw	r18, r24
 730:	40 e0       	ldi	r20, 0x00	; 0
 732:	6b e0       	ldi	r22, 0x0B	; 11
 734:	ce 01       	movw	r24, r28
 736:	0b 96       	adiw	r24, 0x0b	; 11
 738:	16 df       	rcall	.-468    	; 0x566 <lcd_second_handler>
 73a:	d3 01       	movw	r26, r6
        if (alarm_now > alarm_start + ALARM_TIME) {
 73c:	c2 01       	movw	r24, r4
 73e:	88 57       	subi	r24, 0x78	; 120
 740:	9c 4e       	sbci	r25, 0xEC	; 236
 742:	af 4f       	sbci	r26, 0xFF	; 255
 744:	bf 4f       	sbci	r27, 0xFF	; 255
 746:	88 15       	cp	r24, r8
 748:	99 05       	cpc	r25, r9
 74a:	aa 05       	cpc	r26, r10
 74c:	bb 05       	cpc	r27, r11
 74e:	30 f4       	brcc	.+12     	; 0x75c <password_handle+0xea>
            I2C_read_nack();
 750:	95 dd       	rcall	.-1238   	; 0x27c <I2C_read_nack>
 752:	9e dd       	rcall	.-1220   	; 0x290 <I2C_stop>
            I2C_stop();
 754:	87 e0       	ldi	r24, 0x07	; 7
 756:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <__data_end>
            g_STATE = KeyPadTimeout;
 75a:	31 c0       	rjmp	.+98     	; 0x7be <password_handle+0x14c>
 75c:	be 01       	movw	r22, r28
            return;
        }
        key_read_status = password_handle_key(password_buffer, &i);
 75e:	6a 5e       	subi	r22, 0xEA	; 234
 760:	7f 4f       	sbci	r23, 0xFF	; 255
 762:	ce 01       	movw	r24, r28
 764:	01 96       	adiw	r24, 0x01	; 1
 766:	4d df       	rcall	.-358    	; 0x602 <password_handle_key>
 768:	18 2f       	mov	r17, r24
 76a:	8e 3f       	cpi	r24, 0xFE	; 254
        if (key_read_status == PWD_KEY_INDEX_ERR || key_read_status == PWD_KEY_STOP) {
 76c:	89 f0       	breq	.+34     	; 0x790 <password_handle+0x11e>
 76e:	81 30       	cpi	r24, 0x01	; 1
 770:	79 f0       	breq	.+30     	; 0x790 <password_handle+0x11e>
            break;
        } else if (key_read_status != PWD_KEY_TIMEOUT) alarm_start = millis();
 772:	8f 3f       	cpi	r24, 0xFF	; 255
 774:	19 f0       	breq	.+6      	; 0x77c <password_handle+0x10a>
 776:	18 d1       	rcall	.+560    	; 0x9a8 <millis>
 778:	2b 01       	movw	r4, r22
 77a:	3c 01       	movw	r6, r24

        lcd_gotoxy(0, 1);
 77c:	61 e0       	ldi	r22, 0x01	; 1
 77e:	80 e0       	ldi	r24, 0x00	; 0
 780:	7e de       	rcall	.-772    	; 0x47e <lcd_gotoxy>
        lcd_puts(password_buffer);
 782:	ce 01       	movw	r24, r28
 784:	01 96       	adiw	r24, 0x01	; 1
 786:	98 de       	rcall	.-720    	; 0x4b8 <lcd_puts>
 788:	8c e1       	ldi	r24, 0x1C	; 28
        lcd_puts("   ");
 78a:	92 e0       	ldi	r25, 0x02	; 2
 78c:	95 de       	rcall	.-726    	; 0x4b8 <lcd_puts>
 78e:	c9 cf       	rjmp	.-110    	; 0x722 <password_handle+0xb0>
 790:	75 dd       	rcall	.-1302   	; 0x27c <I2C_read_nack>
    }
 792:	7e dd       	rcall	.-1284   	; 0x290 <I2C_stop>
    I2C_read_nack();
 794:	11 30       	cpi	r17, 0x01	; 1
 796:	81 f4       	brne	.+32     	; 0x7b8 <password_handle+0x146>
    I2C_stop();
 798:	be 01       	movw	r22, r28
 79a:	6f 5e       	subi	r22, 0xEF	; 239
    if (key_read_status == PWD_KEY_STOP) {
 79c:	7f 4f       	sbci	r23, 0xFF	; 255
 79e:	ce 01       	movw	r24, r28
        if (strcmp(password_buffer, password) == 0) {
 7a0:	01 96       	adiw	r24, 0x01	; 1
 7a2:	5f d1       	rcall	.+702    	; 0xa62 <strcmp>
 7a4:	89 2b       	or	r24, r25
 7a6:	21 f4       	brne	.+8      	; 0x7b0 <password_handle+0x13e>
 7a8:	82 e0       	ldi	r24, 0x02	; 2
 7aa:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <__data_end>
 7ae:	07 c0       	rjmp	.+14     	; 0x7be <password_handle+0x14c>
 7b0:	86 e0       	ldi	r24, 0x06	; 6
            g_STATE = StopAlarm;
 7b2:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <__data_end>
 7b6:	03 c0       	rjmp	.+6      	; 0x7be <password_handle+0x14c>
 7b8:	88 e0       	ldi	r24, 0x08	; 8
        } else {
            g_STATE = WrongPassword;
 7ba:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <__data_end>
 7be:	66 96       	adiw	r28, 0x16	; 22
 7c0:	0f b6       	in	r0, 0x3f	; 63
        }
    } else {
        g_STATE = TooLongPassword;
 7c2:	f8 94       	cli
 7c4:	de bf       	out	0x3e, r29	; 62
 7c6:	0f be       	out	0x3f, r0	; 63
    }
}
 7c8:	cd bf       	out	0x3d, r28	; 61
 7ca:	df 91       	pop	r29
 7cc:	cf 91       	pop	r28
 7ce:	1f 91       	pop	r17
 7d0:	0f 91       	pop	r16
 7d2:	ff 90       	pop	r15
 7d4:	ef 90       	pop	r14
 7d6:	df 90       	pop	r13
 7d8:	cf 90       	pop	r12
 7da:	bf 90       	pop	r11
 7dc:	af 90       	pop	r10
 7de:	9f 90       	pop	r9
 7e0:	8f 90       	pop	r8
 7e2:	7f 90       	pop	r7
 7e4:	6f 90       	pop	r6
 7e6:	5f 90       	pop	r5
 7e8:	4f 90       	pop	r4
 7ea:	08 95       	ret

000007ec <main>:
 7ec:	8d b1       	in	r24, 0x0d	; 13
 7ee:	88 60       	ori	r24, 0x08	; 8
 7f0:	8d b9       	out	0x0d, r24	; 13
 7f2:	78 94       	sei
 7f4:	8c e0       	ldi	r24, 0x0C	; 12

int main(void) {
    DDRE |= (1 << PE3);
    sei();

    lcd_init(LCD_DISP_ON);
 7f6:	6e de       	rcall	.-804    	; 0x4d4 <lcd_init>
    USART_init(MYUBRR);
 7f8:	87 e6       	ldi	r24, 0x67	; 103
 7fa:	90 e0       	ldi	r25, 0x00	; 0
    I2C_init();
 7fc:	ea d0       	rcall	.+468    	; 0x9d2 <USART_init>
    timer2_init();
 7fe:	d0 dc       	rcall	.-1632   	; 0x1a0 <I2C_init>
 800:	dc d0       	rcall	.+440    	; 0x9ba <timer2_init>
    buzzer_init();
 802:	ac dc       	rcall	.-1704   	; 0x15c <buzzer_init>
 804:	e1 ec       	ldi	r30, 0xC1	; 193
    stdout = &uart_output;
 806:	f2 e0       	ldi	r31, 0x02	; 2
 808:	8e e0       	ldi	r24, 0x0E	; 14
 80a:	92 e0       	ldi	r25, 0x02	; 2
 80c:	93 83       	std	Z+3, r25	; 0x03
 80e:	82 83       	std	Z+2, r24	; 0x02
    stdin = &uart_input;
 810:	80 e0       	ldi	r24, 0x00	; 0
 812:	92 e0       	ldi	r25, 0x02	; 2
 814:	91 83       	std	Z+1, r25	; 0x01
    lcd_clrscr();
 816:	80 83       	st	Z, r24
 818:	3a de       	rcall	.-908    	; 0x48e <lcd_clrscr>
    lcd_puts("Detecting...");
 81a:	80 e7       	ldi	r24, 0x70	; 112
 81c:	92 e0       	ldi	r25, 0x02	; 2
 81e:	4c de       	rcall	.-872    	; 0x4b8 <lcd_puts>
 820:	80 91 bc 02 	lds	r24, 0x02BC	; 0x8002bc <__data_end>
    uint8_t motion_sensed;
    uint8_t twi_status;


    while (1) {
        switch (g_STATE) {
 824:	90 e0       	ldi	r25, 0x00	; 0
 826:	89 30       	cpi	r24, 0x09	; 9
 828:	91 05       	cpc	r25, r1
 82a:	08 f0       	brcs	.+2      	; 0x82e <main+0x42>
 82c:	8e c0       	rjmp	.+284    	; 0x94a <main+0x15e>
 82e:	fc 01       	movw	r30, r24
 830:	88 27       	eor	r24, r24
 832:	ee 58       	subi	r30, 0x8E	; 142
 834:	ff 4f       	sbci	r31, 0xFF	; 255
 836:	8f 4f       	sbci	r24, 0xFF	; 255
 838:	0c c1       	rjmp	.+536    	; 0xa52 <__tablejump2__>
            case Idle:
                if (I2C_command_write(MOTION_READ_COMMAND) != TWI_OK) {
 83a:	8d e6       	ldi	r24, 0x6D	; 109
 83c:	31 dd       	rcall	.-1438   	; 0x2a0 <I2C_command_write>
 83e:	88 23       	and	r24, r24
 840:	39 f0       	breq	.+14     	; 0x850 <main+0x64>
 842:	8d e7       	ldi	r24, 0x7D	; 125
                    printf("error\n");
 844:	92 e0       	ldi	r25, 0x02	; 2
 846:	39 d1       	rcall	.+626    	; 0xaba <puts>
 848:	83 e0       	ldi	r24, 0x03	; 3
                    g_STATE = Fail;
 84a:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <__data_end>
 84e:	80 c0       	rjmp	.+256    	; 0x950 <main+0x164>
                } else {
                    g_STATE = readMotion;
 850:	85 e0       	ldi	r24, 0x05	; 5
 852:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <__data_end>
                }
                break;
            case Fail:
                I2C_stop();
 856:	7c c0       	rjmp	.+248    	; 0x950 <main+0x164>
 858:	1b dd       	rcall	.-1482   	; 0x290 <I2C_stop>
                I2C_init();
 85a:	a2 dc       	rcall	.-1724   	; 0x1a0 <I2C_init>
 85c:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <__data_end>
                g_STATE = Idle;
                break;
 860:	77 c0       	rjmp	.+238    	; 0x950 <main+0x164>
            case StartAlarm:
                Start_Buzzing();
 862:	8f dc       	rcall	.-1762   	; 0x182 <Start_Buzzing>
                lcd_clrscr();
 864:	14 de       	rcall	.-984    	; 0x48e <lcd_clrscr>
 866:	83 e8       	ldi	r24, 0x83	; 131
                lcd_puts("Alarm");
 868:	92 e0       	ldi	r25, 0x02	; 2
 86a:	26 de       	rcall	.-948    	; 0x4b8 <lcd_puts>
 86c:	84 e0       	ldi	r24, 0x04	; 4
 86e:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <__data_end>
                g_STATE = HandleKeypad;
 872:	6e c0       	rjmp	.+220    	; 0x950 <main+0x164>
 874:	8c dc       	rcall	.-1768   	; 0x18e <Stop_Buzzing>
                break;
            case StopAlarm:
                Stop_Buzzing();
 876:	0b de       	rcall	.-1002   	; 0x48e <lcd_clrscr>
 878:	89 e8       	ldi	r24, 0x89	; 137
                lcd_clrscr();
 87a:	92 e0       	ldi	r25, 0x02	; 2
                lcd_puts("Alarm stopped!");
 87c:	1d de       	rcall	.-966    	; 0x4b8 <lcd_puts>
 87e:	2f ef       	ldi	r18, 0xFF	; 255
 880:	83 ed       	ldi	r24, 0xD3	; 211
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 882:	90 e3       	ldi	r25, 0x30	; 48
 884:	21 50       	subi	r18, 0x01	; 1
 886:	80 40       	sbci	r24, 0x00	; 0
 888:	90 40       	sbci	r25, 0x00	; 0
 88a:	e1 f7       	brne	.-8      	; 0x884 <main+0x98>
 88c:	00 c0       	rjmp	.+0      	; 0x88e <main+0xa2>
 88e:	00 00       	nop
 890:	fe dd       	rcall	.-1028   	; 0x48e <lcd_clrscr>
                _delay_ms(1000);
                lcd_clrscr();
 892:	80 e7       	ldi	r24, 0x70	; 112
 894:	92 e0       	ldi	r25, 0x02	; 2
                lcd_puts("Detecting...");
 896:	10 de       	rcall	.-992    	; 0x4b8 <lcd_puts>
 898:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <__data_end>
                g_STATE = Idle;
 89c:	59 c0       	rjmp	.+178    	; 0x950 <main+0x164>
                break;
 89e:	81 e2       	ldi	r24, 0x21	; 33
            case readMotion:
                twi_status = I2C_read_start(SLAVE_READ_ADDR);
 8a0:	a9 dc       	rcall	.-1710   	; 0x1f4 <I2C_read_start>
 8a2:	81 30       	cpi	r24, 0x01	; 1
 8a4:	21 f0       	breq	.+8      	; 0x8ae <main+0xc2>
                if (twi_status != TWI_ACK_RECEIVED) {
 8a6:	83 e0       	ldi	r24, 0x03	; 3
 8a8:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <__data_end>
                    g_STATE = Fail;
 8ac:	51 c0       	rjmp	.+162    	; 0x950 <main+0x164>
                    break;
 8ae:	dc dc       	rcall	.-1608   	; 0x268 <I2C_read_ack>
                }
                motion_sensed = I2C_read_ack();
 8b0:	c8 2f       	mov	r28, r24
 8b2:	89 37       	cpi	r24, 0x79	; 121
                if (motion_sensed == 'y') {
 8b4:	21 f4       	brne	.+8      	; 0x8be <main+0xd2>
                    g_STATE = Fail;
 8b6:	83 e0       	ldi	r24, 0x03	; 3
 8b8:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <__data_end>
                    break;
 8bc:	49 c0       	rjmp	.+146    	; 0x950 <main+0x164>
                }
                I2C_read_nack();
 8be:	de dc       	rcall	.-1604   	; 0x27c <I2C_read_nack>
 8c0:	e7 dc       	rcall	.-1586   	; 0x290 <I2C_stop>
                I2C_stop();
 8c2:	c1 30       	cpi	r28, 0x01	; 1
 8c4:	21 f4       	brne	.+8      	; 0x8ce <main+0xe2>

                if (motion_sensed == 1) {
 8c6:	81 e0       	ldi	r24, 0x01	; 1
 8c8:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <__data_end>
                    g_STATE = StartAlarm;
 8cc:	41 c0       	rjmp	.+130    	; 0x950 <main+0x164>
 8ce:	10 92 bc 02 	sts	0x02BC, r1	; 0x8002bc <__data_end>
                } else {
                    g_STATE = Idle;
 8d2:	3e c0       	rjmp	.+124    	; 0x950 <main+0x164>
                }
                break;
            case HandleKeypad:
                password_handle();
 8d4:	ce de       	rcall	.-612    	; 0x672 <password_handle>
                break;
 8d6:	3c c0       	rjmp	.+120    	; 0x950 <main+0x164>
            case WrongPassword:
                lcd_clrscr();
 8d8:	da dd       	rcall	.-1100   	; 0x48e <lcd_clrscr>
                lcd_puts("Wrong password!");
 8da:	88 e9       	ldi	r24, 0x98	; 152
 8dc:	92 e0       	ldi	r25, 0x02	; 2
 8de:	ec dd       	rcall	.-1064   	; 0x4b8 <lcd_puts>
 8e0:	2f ef       	ldi	r18, 0xFF	; 255
 8e2:	83 ed       	ldi	r24, 0xD3	; 211
 8e4:	90 e3       	ldi	r25, 0x30	; 48
 8e6:	21 50       	subi	r18, 0x01	; 1
 8e8:	80 40       	sbci	r24, 0x00	; 0
 8ea:	90 40       	sbci	r25, 0x00	; 0
 8ec:	e1 f7       	brne	.-8      	; 0x8e6 <main+0xfa>
 8ee:	00 c0       	rjmp	.+0      	; 0x8f0 <main+0x104>
 8f0:	00 00       	nop
 8f2:	84 e0       	ldi	r24, 0x04	; 4
                _delay_ms(1000);
                g_STATE = HandleKeypad;
 8f4:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <__data_end>
                break;
            case TooLongPassword:
                lcd_clrscr();
 8f8:	2b c0       	rjmp	.+86     	; 0x950 <main+0x164>
 8fa:	c9 dd       	rcall	.-1134   	; 0x48e <lcd_clrscr>
                lcd_puts("Too long");
 8fc:	88 ea       	ldi	r24, 0xA8	; 168
 8fe:	92 e0       	ldi	r25, 0x02	; 2
 900:	db dd       	rcall	.-1098   	; 0x4b8 <lcd_puts>
 902:	61 e0       	ldi	r22, 0x01	; 1
                lcd_gotoxy(0, 1);
 904:	80 e0       	ldi	r24, 0x00	; 0
 906:	bb dd       	rcall	.-1162   	; 0x47e <lcd_gotoxy>
 908:	8e e9       	ldi	r24, 0x9E	; 158
 90a:	92 e0       	ldi	r25, 0x02	; 2
                lcd_puts("password!");
 90c:	d5 dd       	rcall	.-1110   	; 0x4b8 <lcd_puts>
 90e:	2f ef       	ldi	r18, 0xFF	; 255
 910:	83 ed       	ldi	r24, 0xD3	; 211
 912:	90 e3       	ldi	r25, 0x30	; 48
 914:	21 50       	subi	r18, 0x01	; 1
 916:	80 40       	sbci	r24, 0x00	; 0
 918:	90 40       	sbci	r25, 0x00	; 0
 91a:	e1 f7       	brne	.-8      	; 0x914 <main+0x128>
 91c:	00 c0       	rjmp	.+0      	; 0x91e <main+0x132>
 91e:	00 00       	nop
 920:	84 e0       	ldi	r24, 0x04	; 4
 922:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <__data_end>
                _delay_ms(1000);
                g_STATE = HandleKeypad;
 926:	14 c0       	rjmp	.+40     	; 0x950 <main+0x164>
 928:	b2 dd       	rcall	.-1180   	; 0x48e <lcd_clrscr>
 92a:	81 eb       	ldi	r24, 0xB1	; 177
                break;
 92c:	92 e0       	ldi	r25, 0x02	; 2
            case KeyPadTimeout:
                lcd_clrscr();
 92e:	c4 dd       	rcall	.-1144   	; 0x4b8 <lcd_puts>
 930:	2f ef       	ldi	r18, 0xFF	; 255
                lcd_puts("Too slow!");
 932:	83 ed       	ldi	r24, 0xD3	; 211
 934:	90 e3       	ldi	r25, 0x30	; 48
 936:	21 50       	subi	r18, 0x01	; 1
 938:	80 40       	sbci	r24, 0x00	; 0
 93a:	90 40       	sbci	r25, 0x00	; 0
 93c:	e1 f7       	brne	.-8      	; 0x936 <main+0x14a>
 93e:	00 c0       	rjmp	.+0      	; 0x940 <main+0x154>
 940:	00 00       	nop
 942:	84 e0       	ldi	r24, 0x04	; 4
 944:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <__data_end>
 948:	03 c0       	rjmp	.+6      	; 0x950 <main+0x164>
 94a:	83 e0       	ldi	r24, 0x03	; 3
                _delay_ms(1000);
                g_STATE = HandleKeypad;
 94c:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <__data_end>
 950:	8f e3       	ldi	r24, 0x3F	; 63
                break;
 952:	9c e9       	ldi	r25, 0x9C	; 156

            default:
                g_STATE = Fail;
 954:	01 97       	sbiw	r24, 0x01	; 1
 956:	f1 f7       	brne	.-4      	; 0x954 <main+0x168>
 958:	00 c0       	rjmp	.+0      	; 0x95a <main+0x16e>
 95a:	00 00       	nop
 95c:	61 cf       	rjmp	.-318    	; 0x820 <main+0x34>

0000095e <__vector_13>:
#include <avr/io.h>
#include <avr/interrupt.h>

volatile unsigned long ms;

ISR(TIMER2_COMPA_vect) {
 95e:	1f 92       	push	r1
 960:	0f 92       	push	r0
 962:	0f b6       	in	r0, 0x3f	; 63
 964:	0f 92       	push	r0
 966:	11 24       	eor	r1, r1
 968:	8f 93       	push	r24
 96a:	9f 93       	push	r25
 96c:	af 93       	push	r26
 96e:	bf 93       	push	r27
        ms++;
 970:	80 91 bd 02 	lds	r24, 0x02BD	; 0x8002bd <ms>
 974:	90 91 be 02 	lds	r25, 0x02BE	; 0x8002be <ms+0x1>
 978:	a0 91 bf 02 	lds	r26, 0x02BF	; 0x8002bf <ms+0x2>
 97c:	b0 91 c0 02 	lds	r27, 0x02C0	; 0x8002c0 <ms+0x3>
 980:	01 96       	adiw	r24, 0x01	; 1
 982:	a1 1d       	adc	r26, r1
 984:	b1 1d       	adc	r27, r1
 986:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <ms>
 98a:	90 93 be 02 	sts	0x02BE, r25	; 0x8002be <ms+0x1>
 98e:	a0 93 bf 02 	sts	0x02BF, r26	; 0x8002bf <ms+0x2>
 992:	b0 93 c0 02 	sts	0x02C0, r27	; 0x8002c0 <ms+0x3>
}
 996:	bf 91       	pop	r27
 998:	af 91       	pop	r26
 99a:	9f 91       	pop	r25
 99c:	8f 91       	pop	r24
 99e:	0f 90       	pop	r0
 9a0:	0f be       	out	0x3f, r0	; 63
 9a2:	0f 90       	pop	r0
 9a4:	1f 90       	pop	r1
 9a6:	18 95       	reti

000009a8 <millis>:

unsigned long int millis(void) {
    return ms;
 9a8:	60 91 bd 02 	lds	r22, 0x02BD	; 0x8002bd <ms>
 9ac:	70 91 be 02 	lds	r23, 0x02BE	; 0x8002be <ms+0x1>
 9b0:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <ms+0x2>
 9b4:	90 91 c0 02 	lds	r25, 0x02C0	; 0x8002c0 <ms+0x3>
}
 9b8:	08 95       	ret

000009ba <timer2_init>:
// Help from:
// https://github.com/bendebled/avr-atmega328p-millis/blob/master/millis.c
void timer2_init(void) {
    TCCR2A = (1 << WGM21);
 9ba:	82 e0       	ldi	r24, 0x02	; 2
 9bc:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7c00b0>
    TCCR2B = (1 << CS22);
 9c0:	94 e0       	ldi	r25, 0x04	; 4
 9c2:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7c00b1>
    TIMSK2 = (1 << OCIE2A); //enable compA interrupt
 9c6:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7c0070>
    OCR2A = ((F_CPU / 64) / 1000);
 9ca:	8a ef       	ldi	r24, 0xFA	; 250
 9cc:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7c00b3>
 9d0:	08 95       	ret

000009d2 <USART_init>:
#include "usart.h"

//inits UART 0.
void USART_init(uint16_t ubrr)
{
    UBRR0H = (unsigned char) (ubrr >> 8);
 9d2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
    UBRR0L = (unsigned char) ubrr;
 9d6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>

    UCSR0B |= (1 << RXEN0) | (1 << TXEN0);
 9da:	e1 ec       	ldi	r30, 0xC1	; 193
 9dc:	f0 e0       	ldi	r31, 0x00	; 0
 9de:	80 81       	ld	r24, Z
 9e0:	88 61       	ori	r24, 0x18	; 24
 9e2:	80 83       	st	Z, r24
    UCSR0C |= (1 << USBS0) | (3 << UCSZ00);
 9e4:	e2 ec       	ldi	r30, 0xC2	; 194
 9e6:	f0 e0       	ldi	r31, 0x00	; 0
 9e8:	80 81       	ld	r24, Z
 9ea:	8e 60       	ori	r24, 0x0E	; 14
 9ec:	80 83       	st	Z, r24
 9ee:	08 95       	ret

000009f0 <USART_Transmit>:
}

int USART_Transmit(char data, FILE *stream)
{
    while(!(UCSR0A & (1 << UDRE0)));
 9f0:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 9f4:	95 ff       	sbrs	r25, 5
 9f6:	fc cf       	rjmp	.-8      	; 0x9f0 <USART_Transmit>
    UDR0 = data;
 9f8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
}
 9fc:	08 95       	ret

000009fe <USART_Receive>:

int USART_Receive(FILE *stream)
{
    while(!(UCSR0A & (1 << UDRE0)));
 9fe:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 a02:	85 ff       	sbrs	r24, 5
 a04:	fc cf       	rjmp	.-8      	; 0x9fe <USART_Receive>
    return UDR0;
 a06:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 a0a:	90 e0       	ldi	r25, 0x00	; 0
 a0c:	08 95       	ret

00000a0e <__udivmodsi4>:
 a0e:	a1 e2       	ldi	r26, 0x21	; 33
 a10:	1a 2e       	mov	r1, r26
 a12:	aa 1b       	sub	r26, r26
 a14:	bb 1b       	sub	r27, r27
 a16:	fd 01       	movw	r30, r26
 a18:	0d c0       	rjmp	.+26     	; 0xa34 <__udivmodsi4_ep>

00000a1a <__udivmodsi4_loop>:
 a1a:	aa 1f       	adc	r26, r26
 a1c:	bb 1f       	adc	r27, r27
 a1e:	ee 1f       	adc	r30, r30
 a20:	ff 1f       	adc	r31, r31
 a22:	a2 17       	cp	r26, r18
 a24:	b3 07       	cpc	r27, r19
 a26:	e4 07       	cpc	r30, r20
 a28:	f5 07       	cpc	r31, r21
 a2a:	20 f0       	brcs	.+8      	; 0xa34 <__udivmodsi4_ep>
 a2c:	a2 1b       	sub	r26, r18
 a2e:	b3 0b       	sbc	r27, r19
 a30:	e4 0b       	sbc	r30, r20
 a32:	f5 0b       	sbc	r31, r21

00000a34 <__udivmodsi4_ep>:
 a34:	66 1f       	adc	r22, r22
 a36:	77 1f       	adc	r23, r23
 a38:	88 1f       	adc	r24, r24
 a3a:	99 1f       	adc	r25, r25
 a3c:	1a 94       	dec	r1
 a3e:	69 f7       	brne	.-38     	; 0xa1a <__udivmodsi4_loop>
 a40:	60 95       	com	r22
 a42:	70 95       	com	r23
 a44:	80 95       	com	r24
 a46:	90 95       	com	r25
 a48:	9b 01       	movw	r18, r22
 a4a:	ac 01       	movw	r20, r24
 a4c:	bd 01       	movw	r22, r26
 a4e:	cf 01       	movw	r24, r30
 a50:	08 95       	ret

00000a52 <__tablejump2__>:
 a52:	ee 0f       	add	r30, r30
 a54:	ff 1f       	adc	r31, r31
 a56:	88 1f       	adc	r24, r24
 a58:	8b bf       	out	0x3b, r24	; 59
 a5a:	07 90       	elpm	r0, Z+
 a5c:	f6 91       	elpm	r31, Z
 a5e:	e0 2d       	mov	r30, r0
 a60:	19 94       	eijmp

00000a62 <strcmp>:
 a62:	fb 01       	movw	r30, r22
 a64:	dc 01       	movw	r26, r24
 a66:	8d 91       	ld	r24, X+
 a68:	01 90       	ld	r0, Z+
 a6a:	80 19       	sub	r24, r0
 a6c:	01 10       	cpse	r0, r1
 a6e:	d9 f3       	breq	.-10     	; 0xa66 <strcmp+0x4>
 a70:	99 0b       	sbc	r25, r25
 a72:	08 95       	ret

00000a74 <__itoa_ncheck>:
 a74:	bb 27       	eor	r27, r27
 a76:	4a 30       	cpi	r20, 0x0A	; 10
 a78:	31 f4       	brne	.+12     	; 0xa86 <__itoa_ncheck+0x12>
 a7a:	99 23       	and	r25, r25
 a7c:	22 f4       	brpl	.+8      	; 0xa86 <__itoa_ncheck+0x12>
 a7e:	bd e2       	ldi	r27, 0x2D	; 45
 a80:	90 95       	com	r25
 a82:	81 95       	neg	r24
 a84:	9f 4f       	sbci	r25, 0xFF	; 255
 a86:	01 c0       	rjmp	.+2      	; 0xa8a <__utoa_common>

00000a88 <__utoa_ncheck>:
 a88:	bb 27       	eor	r27, r27

00000a8a <__utoa_common>:
 a8a:	fb 01       	movw	r30, r22
 a8c:	55 27       	eor	r21, r21
 a8e:	aa 27       	eor	r26, r26
 a90:	88 0f       	add	r24, r24
 a92:	99 1f       	adc	r25, r25
 a94:	aa 1f       	adc	r26, r26
 a96:	a4 17       	cp	r26, r20
 a98:	10 f0       	brcs	.+4      	; 0xa9e <__utoa_common+0x14>
 a9a:	a4 1b       	sub	r26, r20
 a9c:	83 95       	inc	r24
 a9e:	50 51       	subi	r21, 0x10	; 16
 aa0:	b9 f7       	brne	.-18     	; 0xa90 <__utoa_common+0x6>
 aa2:	a0 5d       	subi	r26, 0xD0	; 208
 aa4:	aa 33       	cpi	r26, 0x3A	; 58
 aa6:	08 f0       	brcs	.+2      	; 0xaaa <__utoa_common+0x20>
 aa8:	a9 5d       	subi	r26, 0xD9	; 217
 aaa:	a1 93       	st	Z+, r26
 aac:	00 97       	sbiw	r24, 0x00	; 0
 aae:	79 f7       	brne	.-34     	; 0xa8e <__utoa_common+0x4>
 ab0:	b1 11       	cpse	r27, r1
 ab2:	b1 93       	st	Z+, r27
 ab4:	11 92       	st	Z+, r1
 ab6:	cb 01       	movw	r24, r22
 ab8:	30 c0       	rjmp	.+96     	; 0xb1a <strrev>

00000aba <puts>:
 aba:	0f 93       	push	r16
 abc:	1f 93       	push	r17
 abe:	cf 93       	push	r28
 ac0:	df 93       	push	r29
 ac2:	e0 91 c3 02 	lds	r30, 0x02C3	; 0x8002c3 <__iob+0x2>
 ac6:	f0 91 c4 02 	lds	r31, 0x02C4	; 0x8002c4 <__iob+0x3>
 aca:	23 81       	ldd	r18, Z+3	; 0x03
 acc:	21 ff       	sbrs	r18, 1
 ace:	1b c0       	rjmp	.+54     	; 0xb06 <puts+0x4c>
 ad0:	8c 01       	movw	r16, r24
 ad2:	d0 e0       	ldi	r29, 0x00	; 0
 ad4:	c0 e0       	ldi	r28, 0x00	; 0
 ad6:	f8 01       	movw	r30, r16
 ad8:	81 91       	ld	r24, Z+
 ada:	8f 01       	movw	r16, r30
 adc:	60 91 c3 02 	lds	r22, 0x02C3	; 0x8002c3 <__iob+0x2>
 ae0:	70 91 c4 02 	lds	r23, 0x02C4	; 0x8002c4 <__iob+0x3>
 ae4:	db 01       	movw	r26, r22
 ae6:	18 96       	adiw	r26, 0x08	; 8
 ae8:	ed 91       	ld	r30, X+
 aea:	fc 91       	ld	r31, X
 aec:	19 97       	sbiw	r26, 0x09	; 9
 aee:	88 23       	and	r24, r24
 af0:	31 f0       	breq	.+12     	; 0xafe <puts+0x44>
 af2:	19 95       	eicall
 af4:	89 2b       	or	r24, r25
 af6:	79 f3       	breq	.-34     	; 0xad6 <puts+0x1c>
 af8:	df ef       	ldi	r29, 0xFF	; 255
 afa:	cf ef       	ldi	r28, 0xFF	; 255
 afc:	ec cf       	rjmp	.-40     	; 0xad6 <puts+0x1c>
 afe:	8a e0       	ldi	r24, 0x0A	; 10
 b00:	19 95       	eicall
 b02:	89 2b       	or	r24, r25
 b04:	19 f0       	breq	.+6      	; 0xb0c <puts+0x52>
 b06:	8f ef       	ldi	r24, 0xFF	; 255
 b08:	9f ef       	ldi	r25, 0xFF	; 255
 b0a:	02 c0       	rjmp	.+4      	; 0xb10 <puts+0x56>
 b0c:	8d 2f       	mov	r24, r29
 b0e:	9c 2f       	mov	r25, r28
 b10:	df 91       	pop	r29
 b12:	cf 91       	pop	r28
 b14:	1f 91       	pop	r17
 b16:	0f 91       	pop	r16
 b18:	08 95       	ret

00000b1a <strrev>:
 b1a:	dc 01       	movw	r26, r24
 b1c:	fc 01       	movw	r30, r24
 b1e:	67 2f       	mov	r22, r23
 b20:	71 91       	ld	r23, Z+
 b22:	77 23       	and	r23, r23
 b24:	e1 f7       	brne	.-8      	; 0xb1e <strrev+0x4>
 b26:	32 97       	sbiw	r30, 0x02	; 2
 b28:	04 c0       	rjmp	.+8      	; 0xb32 <strrev+0x18>
 b2a:	7c 91       	ld	r23, X
 b2c:	6d 93       	st	X+, r22
 b2e:	70 83       	st	Z, r23
 b30:	62 91       	ld	r22, -Z
 b32:	ae 17       	cp	r26, r30
 b34:	bf 07       	cpc	r27, r31
 b36:	c8 f3       	brcs	.-14     	; 0xb2a <strrev+0x10>
 b38:	08 95       	ret

00000b3a <_exit>:
 b3a:	f8 94       	cli

00000b3c <__stop_program>:
 b3c:	ff cf       	rjmp	.-2      	; 0xb3c <__stop_program>
